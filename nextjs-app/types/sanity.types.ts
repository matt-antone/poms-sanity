/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type DeletedDocsBin = {
  _id: string;
  _type: "deletedDocs.bin";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  deletedDocLogs?: Array<{
    docId: string;
    deletedAt: string;
    type?: string;
    documentTitle: string;
    deletedBy?: string;
    _type: "log";
    _key: string;
  }>;
  deletedDocIds?: Array<string>;
  title?: string;
};

export type YoutubeBlock = {
  _type: "youtubeBlock";
  heading?: {
    text?: string;
    level?: 2 | 3 | 4 | 5;
  };
  url: string;
  options?: {
    id?: string;
    style?: "DEFAULT" | "HOME" | "FEATURES";
    textAlign?: "left" | "center" | "right";
    vAlign?: "top" | "center" | "bottom";
    blockTheme?: "DEFAULT" | "PRIMARY" | "SECONDARY" | "MUTED" | "ACCENT";
    bgFullWidth?: boolean;
  };
};

export type TestimonialBlock = {
  _type: "testimonialBlock";
  heading?: {
    text?: string;
    level?: 2 | 3 | 4 | 5;
  };
  quote: string;
  author?: {
    name: string;
    title?: string;
    image?: CustomImage;
  };
  rating?: number;
  options?: {
    id?: string;
    style?: "DEFAULT" | "HOME" | "FEATURES";
    textAlign?: "left" | "center" | "right";
    vAlign?: "top" | "center" | "bottom";
    blockTheme?: "DEFAULT" | "PRIMARY" | "SECONDARY" | "MUTED" | "ACCENT";
    bgFullWidth?: boolean;
  };
};

export type StatsBlock = {
  _type: "statsBlock";
  heading?: {
    text?: string;
    level?: 2 | 3 | 4 | 5;
  };
  stats: Array<{
    value?: string;
    title?: string;
    _type: "stat";
    _key: string;
  }>;
  options?: {
    id?: string;
    style?: "DEFAULT" | "HOME" | "FEATURES";
    textAlign?: "left" | "center" | "right";
    vAlign?: "top" | "center" | "bottom";
    blockTheme?: "DEFAULT" | "PRIMARY" | "SECONDARY" | "MUTED" | "ACCENT";
    bgFullWidth?: boolean;
  };
};

export type SlideshowBlock = {
  _type: "slideshowBlock";
  heading?: {
    text?: string;
    level?: 2 | 3 | 4 | 5;
  };
  images: Array<{
    _key: string;
  } & CustomImage>;
  options?: {
    id?: string;
    style?: "DEFAULT" | "HOME" | "FEATURES";
    textAlign?: "left" | "center" | "right";
    vAlign?: "top" | "center" | "bottom";
    blockTheme?: "DEFAULT" | "PRIMARY" | "SECONDARY" | "MUTED" | "ACCENT";
    bgFullWidth?: boolean;
    autoplay?: boolean;
    interval?: number;
  };
};

export type PostsListBlock = {
  _type: "postsListBlock";
  postType: "posts" | "pages";
  limit?: number;
  order?: "newest" | "oldest";
  showPagination?: boolean;
};

export type LogoParadeBlock = {
  _type: "logoParadeBlock";
  heading?: {
    text?: string;
    level?: 2 | 3 | 4 | 5;
  };
  images: Array<{
    _key: string;
  } & CustomImage>;
  options?: {
    id?: string;
    style?: "DEFAULT" | "HOME" | "FEATURES";
    textAlign?: "left" | "center" | "right";
    vAlign?: "top" | "center" | "bottom";
    blockTheme?: "DEFAULT" | "PRIMARY" | "SECONDARY" | "MUTED" | "ACCENT";
    bgFullWidth?: boolean;
  };
};

export type ImageGridBlock = {
  _type: "imageGridBlock";
  heading?: {
    text?: string;
    level?: 2 | 3 | 4 | 5;
  };
  images?: Array<{
    customImage: CustomImage;
    _key: string;
  }>;
  options?: {
    id?: string;
    style?: "DEFAULT" | "HOME" | "FEATURES";
    textAlign?: "left" | "center" | "right";
    vAlign?: "top" | "center" | "bottom";
    blockTheme?: "DEFAULT" | "PRIMARY" | "SECONDARY" | "MUTED" | "ACCENT";
    bgFullWidth?: boolean;
    columns?: number;
  };
};

export type GalleryBlock = {
  _type: "galleryBlock";
  heading?: {
    text?: string;
    level?: 2 | 3 | 4 | 5;
  };
  images?: Array<{
    _key: string;
  } & CustomImage>;
  options?: {
    id?: string;
    style?: "DEFAULT" | "HOME" | "FEATURES";
    textAlign?: "left" | "center" | "right";
    vAlign?: "top" | "center" | "bottom";
    blockTheme?: "DEFAULT" | "PRIMARY" | "SECONDARY" | "MUTED" | "ACCENT";
    bgFullWidth?: boolean;
    width?: "full" | "limited";
  };
};

export type FeaturesBlock = {
  _type: "featuresBlock";
  heading?: {
    text?: string;
    level?: 2 | 3 | 4 | 5;
  };
  features?: Array<{
    icon?: CustomImage;
    title?: string;
    description?: string;
    _key: string;
  }>;
  options?: {
    id?: string;
    style?: "DEFAULT" | "HOME" | "FEATURES";
    textAlign?: "left" | "center" | "right";
    vAlign?: "top" | "center" | "bottom";
    blockTheme?: "DEFAULT" | "PRIMARY" | "SECONDARY" | "MUTED" | "ACCENT";
    bgFullWidth?: boolean;
    columns?: number;
    layout?: "default" | "cards";
  };
};

export type ContentBlock = {
  _type: "contentBlock";
  content?: Array<{
    _key: string;
  } & CustomImage | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      linkType?: "href" | "page" | "post";
      href?: string;
      page?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      post?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      openInNewTab?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  align?: "start" | "center" | "end";
  options?: {
    id?: string;
    style?: "DEFAULT" | "HOME" | "FEATURES";
    textAlign?: "left" | "center" | "right";
    vAlign?: "top" | "center" | "bottom";
    blockTheme?: "DEFAULT" | "PRIMARY" | "SECONDARY" | "MUTED" | "ACCENT";
    bgFullWidth?: boolean;
  };
};

export type CarouselBlock = {
  _type: "carouselBlock";
  heading?: {
    text?: string;
    level?: 2 | 3 | 4 | 5;
  };
  images?: Array<{
    image?: CustomImage;
    body?: Array<{
      _key: string;
    } & CustomImage | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        linkType?: "href" | "page" | "post";
        href?: string;
        page?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        };
        post?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        openInNewTab?: boolean;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    _key: string;
  }>;
  autoplay?: boolean;
  options?: {
    id?: string;
    style?: "DEFAULT" | "HOME" | "FEATURES";
    textAlign?: "left" | "center" | "right";
    vAlign?: "top" | "center" | "bottom";
    blockTheme?: "DEFAULT" | "PRIMARY" | "SECONDARY" | "MUTED" | "ACCENT";
    bgFullWidth?: boolean;
  };
};

export type CallToActionBlock = {
  _type: "callToActionBlock";
  body?: Array<{
    _key: string;
  } & CustomImage | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      linkType?: "href" | "page" | "post";
      href?: string;
      page?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      post?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      openInNewTab?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  formDisplay: "inline" | "modal";
  buttonText?: string;
  options?: {
    id?: string;
    style?: "DEFAULT" | "HOME" | "FEATURES";
    textAlign?: "left" | "center" | "right";
    vAlign?: "top" | "center" | "bottom";
    blockTheme?: "DEFAULT" | "PRIMARY" | "SECONDARY" | "MUTED" | "ACCENT";
    bgFullWidth?: boolean;
    layout?: "default" | "form";
  };
};

export type BentoBlock = {
  _type: "bentoBlock";
  heading?: {
    text?: string;
    level?: 2 | 3 | 4 | 5;
  };
  grid?: {
    items?: Array<{
      content?: Array<{
        _key: string;
      } & CustomImage | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "blockquote";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          linkType?: "href" | "page" | "post";
          href?: string;
          page?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "page";
          };
          post?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          openInNewTab?: boolean;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      options?: {
        blockTheme?: "PRIMARY" | "SECONDARY" | "ACCENT" | "MUTED" | "TRANSPARENT";
        colspan?: "one" | "two" | "three" | "four";
      };
      _key: string;
    }>;
    options?: {
      columns?: "one" | "two" | "three" | "four";
      noGap?: boolean;
    };
  };
  options?: {
    id?: string;
    style?: "DEFAULT" | "HOME" | "FEATURES";
    textAlign?: "left" | "center" | "right";
    vAlign?: "top" | "center" | "bottom";
    blockTheme?: "DEFAULT" | "PRIMARY" | "SECONDARY" | "MUTED" | "ACCENT";
    bgFullWidth?: boolean;
    offset?: boolean;
    reverse?: boolean;
  };
};

export type AdvancedListBlock = {
  _type: "advancedListBlock";
  heading?: {
    text?: string;
    level?: 2 | 3 | 4 | 5;
  };
  listItems?: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    body?: Array<{
      _key: string;
    } & CustomImage | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        linkType?: "href" | "page" | "post";
        href?: string;
        page?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        };
        post?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        openInNewTab?: boolean;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    _type: "listItem";
    _key: string;
  }>;
  options?: {
    id?: string;
    style?: "DEFAULT" | "HOME" | "FEATURES";
    textAlign?: "left" | "center" | "right";
    vAlign?: "top" | "center" | "bottom";
    blockTheme?: "DEFAULT" | "PRIMARY" | "SECONDARY" | "MUTED" | "ACCENT";
    bgFullWidth?: boolean;
    type?: "bullet" | "number";
    orientation?: "horizontal" | "vertical";
  };
};

export type BlockContentBento = Array<{
  _key: string;
} & CustomImage | {
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    linkType?: "href" | "page" | "post";
    href?: string;
    page?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    };
    post?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "post";
    };
    openInNewTab?: boolean;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type BlockContent = Array<{
  _key: string;
} & CustomImage | {
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    linkType?: "href" | "page" | "post";
    href?: string;
    page?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    };
    post?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "post";
    };
    openInNewTab?: boolean;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type NavItem = {
  _type: "navItem";
  linkType?: "href" | "page" | "dropdown";
  dropdown?: {
    label: string;
    items?: Array<{
      _key: string;
    } & NavItem>;
  };
  href?: string;
  page?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  openInNewTab?: boolean;
};

export type Home = {
  _id: string;
  _type: "home";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  pageBuilder?: Array<{
    _key: string;
  } & AdvancedListBlock | {
    _key: string;
  } & BentoBlock | {
    _key: string;
  } & CallToActionBlock | {
    _key: string;
  } & CarouselBlock | {
    _key: string;
  } & ContentBlock | {
    _key: string;
  } & FeaturesBlock | {
    _key: string;
  } & GalleryBlock | {
    _key: string;
  } & ImageGridBlock | {
    _key: string;
  } & LogoParadeBlock | {
    _key: string;
  } & PostsListBlock | {
    _key: string;
  } & SlideshowBlock | {
    _key: string;
  } & StatsBlock | {
    _key: string;
  } & TestimonialBlock | {
    _key: string;
  } & YoutubeBlock>;
  gallery?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    altText?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  heading: string;
  subheading?: string;
  showHero?: boolean;
  hero?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: BlockContent;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  pageBuilder?: Array<{
    _key: string;
  } & AdvancedListBlock | {
    _key: string;
  } & BentoBlock | {
    _key: string;
  } & CallToActionBlock | {
    _key: string;
  } & CarouselBlock | {
    _key: string;
  } & ContentBlock | {
    _key: string;
  } & FeaturesBlock | {
    _key: string;
  } & GalleryBlock | {
    _key: string;
  } & ImageGridBlock | {
    _key: string;
  } & LogoParadeBlock | {
    _key: string;
  } & PostsListBlock | {
    _key: string;
  } & SlideshowBlock | {
    _key: string;
  } & StatsBlock | {
    _key: string;
  } & TestimonialBlock | {
    _key: string;
  } & YoutubeBlock>;
  gallery?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    altText?: string;
    _type: "image";
    _key: string;
  }>;
};

export type CustomImage = {
  _type: "customImage";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  altText: string;
  metadata?: {
    width?: number;
    height?: number;
    circle?: boolean;
    showFigure?: boolean;
  };
  figure?: {
    caption?: BlockContent;
    photoCredit?: {
      credit?: string;
      creditLink?: string;
    };
  };
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  metaTitle?: string;
  slug: Slug;
  publishedAt?: string;
  expirationDate?: string;
  excerpt?: string;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  floatImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "person";
  };
  body?: BlockContent;
};

export type Person = {
  _id: string;
  _type: "person";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  firstName: string;
  lastName: string;
  title?: string;
  position?: string;
  email?: string;
  phone?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  bio?: BlockContent;
  slug: Slug;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description?: string;
  slug: Slug;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  showTitle?: boolean;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
  siteLogo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  navigation?: {
    desktop?: Array<{
      _key: string;
    } & NavItem>;
    mobile?: Array<{
      _key: string;
    } & NavItem>;
    footer?: Array<{
      _key: string;
    } & NavItem>;
  };
  organizations?: Array<{
    label?: string;
    name?: string;
    businessType?: "AnimalShelter" | "ArchiveOrganization" | "AutomotiveBusiness" | "ChildCare" | "Dentist" | "DryCleaningOrLaundry" | "Electrician" | "EmergencyService" | "EmploymentAgency" | "EntertainmentBusiness" | "FinancialService" | "FoodEstablishment" | "GovernmentOffice" | "HealthAndBeautyBusiness" | "HomeAndConstructionBusiness" | "InternetCafe" | "LegalService" | "Library" | "LodgingBusiness" | "MedicalBusiness" | "ProfessionalService" | "RadioStation" | "RealEstateAgent" | "RecyclingCenter" | "SelfStorage" | "ShoppingCenter" | "SportsActivityLocation" | "Store" | "TelevisionStation" | "TouristInformationCenter" | "TravelAgency";
    homepage?: string;
    address?: {
      street1?: string;
      street2?: string;
      city?: string;
      state?: string;
      zip?: string;
    };
    phone?: string;
    email?: string;
    gallery?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      altText?: string;
      _type: "image";
      _key: string;
    }>;
    _type: "organization";
    _key: string;
  }>;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<{
    _key: string;
  } & SanityAssistInstructionTask>;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<{
    _key: string;
  } & SanityAssistSchemaTypeField>;
};

export type SanityAssistOutputType = {
  _type: "sanity.assist.output.type";
  type?: string;
};

export type SanityAssistOutputField = {
  _type: "sanity.assist.output.field";
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  } | {
    _key: string;
  } & SanityAssistInstructionFieldRef | {
    _key: string;
  } & SanityAssistInstructionContext | {
    _key: string;
  } & SanityAssistInstructionUserInput>;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<{
    _key: string;
  } & SanityAssistOutputField | {
    _key: string;
  } & SanityAssistOutputType>;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<{
    _key: string;
  } & SanityAssistInstruction>;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = DeletedDocsBin | YoutubeBlock | TestimonialBlock | StatsBlock | SlideshowBlock | PostsListBlock | LogoParadeBlock | ImageGridBlock | GalleryBlock | FeaturesBlock | ContentBlock | CarouselBlock | CallToActionBlock | BentoBlock | AdvancedListBlock | BlockContentBento | BlockContent | NavItem | Home | Page | CustomImage | Post | Person | Category | Settings | MediaTag | SanityAssistInstructionTask | SanityAssistTaskStatus | SanityAssistSchemaTypeAnnotations | SanityAssistOutputType | SanityAssistOutputField | SanityAssistInstructionContext | AssistInstructionContext | SanityAssistInstructionUserInput | SanityAssistInstructionPrompt | SanityAssistInstructionFieldRef | SanityAssistInstruction | SanityAssistSchemaTypeField | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries/home.ts
// Variable: homeGallery
// Query: {  gallery[]{    ...,    asset->  }}
export type HomeGalleryResult = {
  gallery: never;
};
// Variable: defaultOGImage
// Query: {  "defaultOGImage": *[_type == "settings"][0].ogImage{    ...,    asset->,  }}
export type DefaultOGImageResult = {
  defaultOGImage: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  } | null;
};
// Variable: getHomeQuery
// Query: *[_type == 'home'][0]{    _id,    _type,    "link": "/",    gallery[]{      ...,      asset->    },    "defaultOGImage": *[_type == "settings"][0].ogImage{      ...,      asset->,    },    "pageBuilder": pageBuilder[]{      ...,      _type == 'advancedListBlock' => {        ...,        listItems[]{          ...,          image{            ...,            asset->          }        }      },      _type == "carouselBlock" => {        ...,        images[]{          ...,          image{            ...,            asset->          }        }      },      _type == "featuresBlock" => {        ...,        features[]{          ...,          icon{            ...,            image{              ...,              asset->            }          }        }      },      _type == "heroBlock" => {        ...,        image{          ...,          asset->        }      },      _type == "imageGridBlock" => {        ...,        images[]{          ...,          customImage{            ...,            image{              ...,              asset->            }          }        }      },      _type == "testimonialBlock" => {        ...,        author{          ...,          image{            ...,            asset->          }        }      },      _type == "postsListBlock" => {        ...,        postType,        limit,        order,        "posts": *[_type == "post" && defined(slug.current)][0..10]      }    }  }
export type GetHomeQueryResult = {
  _id: string;
  _type: "home";
  link: "/";
  gallery: Array<{
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    altText?: string;
    _type: "image";
    _key: string;
  }> | null;
  defaultOGImage: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  } | null;
  pageBuilder: Array<{
    _key: string;
    _type: "advancedListBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    listItems: Array<{
      image: {
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
      body?: Array<{
        _key: string;
      } & CustomImage | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          linkType?: "href" | "page" | "post";
          href?: string;
          page?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "page";
          };
          post?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          openInNewTab?: boolean;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      _type: "listItem";
      _key: string;
    }> | null;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
      type?: "bullet" | "number";
      orientation?: "horizontal" | "vertical";
    };
  } | {
    _key: string;
    _type: "bentoBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    grid?: {
      items?: Array<{
        content?: Array<{
          _key: string;
        } & CustomImage | {
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            linkType?: "href" | "page" | "post";
            href?: string;
            page?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "page";
            };
            post?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "post";
            };
            openInNewTab?: boolean;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        }>;
        options?: {
          blockTheme?: "ACCENT" | "MUTED" | "PRIMARY" | "SECONDARY" | "TRANSPARENT";
          colspan?: "four" | "one" | "three" | "two";
        };
        _key: string;
      }>;
      options?: {
        columns?: "four" | "one" | "three" | "two";
        noGap?: boolean;
      };
    };
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
      offset?: boolean;
      reverse?: boolean;
    };
  } | {
    _key: string;
    _type: "callToActionBlock";
    body?: Array<{
      _key: string;
    } & CustomImage | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        linkType?: "href" | "page" | "post";
        href?: string;
        page?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        };
        post?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        openInNewTab?: boolean;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    formDisplay: "inline" | "modal";
    buttonText?: string;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
      layout?: "default" | "form";
    };
  } | {
    _key: string;
    _type: "carouselBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    images: Array<{
      image: {
        _type: "customImage";
        image?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
        };
        altText: string;
        metadata?: {
          width?: number;
          height?: number;
          circle?: boolean;
          showFigure?: boolean;
        };
        figure?: {
          caption?: BlockContent;
          photoCredit?: {
            credit?: string;
            creditLink?: string;
          };
        };
        asset: null;
      } | null;
      body?: Array<{
        _key: string;
      } & CustomImage | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          linkType?: "href" | "page" | "post";
          href?: string;
          page?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "page";
          };
          post?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          openInNewTab?: boolean;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      _key: string;
    }> | null;
    autoplay?: boolean;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
    };
  } | {
    _key: string;
    _type: "contentBlock";
    content?: Array<{
      _key: string;
    } & CustomImage | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        linkType?: "href" | "page" | "post";
        href?: string;
        page?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        };
        post?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        openInNewTab?: boolean;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    align?: "center" | "end" | "start";
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
    };
  } | {
    _key: string;
    _type: "featuresBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    features: Array<{
      icon: {
        _type: "customImage";
        image: {
          asset: {
            _id: string;
            _type: "sanity.imageAsset";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            originalFilename?: string;
            label?: string;
            title?: string;
            description?: string;
            altText?: string;
            sha1hash?: string;
            extension?: string;
            mimeType?: string;
            size?: number;
            assetId?: string;
            uploadId?: string;
            path?: string;
            url?: string;
            metadata?: SanityImageMetadata;
            source?: SanityAssetSourceData;
          } | null;
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
        } | null;
        altText: string;
        metadata?: {
          width?: number;
          height?: number;
          circle?: boolean;
          showFigure?: boolean;
        };
        figure?: {
          caption?: BlockContent;
          photoCredit?: {
            credit?: string;
            creditLink?: string;
          };
        };
      } | null;
      title?: string;
      description?: string;
      _key: string;
    }> | null;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
      columns?: number;
      layout?: "cards" | "default";
    };
  } | {
    _key: string;
    _type: "galleryBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    images?: Array<{
      _key: string;
    } & CustomImage>;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
      width?: "full" | "limited";
    };
  } | {
    _key: string;
    _type: "imageGridBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    images: Array<{
      customImage: {
        _type: "customImage";
        image: {
          asset: {
            _id: string;
            _type: "sanity.imageAsset";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            originalFilename?: string;
            label?: string;
            title?: string;
            description?: string;
            altText?: string;
            sha1hash?: string;
            extension?: string;
            mimeType?: string;
            size?: number;
            assetId?: string;
            uploadId?: string;
            path?: string;
            url?: string;
            metadata?: SanityImageMetadata;
            source?: SanityAssetSourceData;
          } | null;
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
        } | null;
        altText: string;
        metadata?: {
          width?: number;
          height?: number;
          circle?: boolean;
          showFigure?: boolean;
        };
        figure?: {
          caption?: BlockContent;
          photoCredit?: {
            credit?: string;
            creditLink?: string;
          };
        };
      };
      _key: string;
    }> | null;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
      columns?: number;
    };
  } | {
    _key: string;
    _type: "logoParadeBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    images: Array<{
      _key: string;
    } & CustomImage>;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
    };
  } | {
    _key: string;
    _type: "postsListBlock";
    postType: "pages" | "posts";
    limit: number | null;
    order: "newest" | "oldest" | null;
    showPagination?: boolean;
    posts: Array<{
      _id: string;
      _type: "post";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title: string;
      metaTitle?: string;
      slug: Slug;
      publishedAt?: string;
      expirationDate?: string;
      excerpt?: string;
      mainImage?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
      floatImage?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
      category?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "category";
      };
      author?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "person";
      };
      body?: BlockContent;
    }>;
  } | {
    _key: string;
    _type: "slideshowBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    images: Array<{
      _key: string;
    } & CustomImage>;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
      autoplay?: boolean;
      interval?: number;
    };
  } | {
    _key: string;
    _type: "statsBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    stats: Array<{
      value?: string;
      title?: string;
      _type: "stat";
      _key: string;
    }>;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
    };
  } | {
    _key: string;
    _type: "testimonialBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    quote: string;
    author: {
      name: string;
      title?: string;
      image: {
        _type: "customImage";
        image?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
        };
        altText: string;
        metadata?: {
          width?: number;
          height?: number;
          circle?: boolean;
          showFigure?: boolean;
        };
        figure?: {
          caption?: BlockContent;
          photoCredit?: {
            credit?: string;
            creditLink?: string;
          };
        };
        asset: null;
      } | null;
    } | null;
    rating?: number;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
    };
  } | {
    _key: string;
    _type: "youtubeBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    url: string;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
    };
  }> | null;
} | null;

// Source: ./sanity/lib/queries/page.ts
// Variable: getPageQuery
// Query: *[_type == 'page' && slug.current == $slug][0]{    _id,    _type,    title,    slug,    heading,    subheading,    showHero,    hero{      alt,      asset->{        url,        metadata { dimensions }      }    },    description,    coverImage{      ...,      asset->    },    "link": "/" + slug.current,    gallery[]{      ...,      asset->    },    "defaultOGImage": *[_type == "settings"][0].ogImage{      ...,      asset->    },    "parentPages": *[_type == "page" && references(^._id)]{      _id,      title,      "slug": slug.current    },    "pageBuilder": pageBuilder[]{      ...,      _type == 'advancedListBlock' => {        ...,        listItems[]{          ...,          image{            ...,            asset->          }        }      },      _type == "carouselBlock" => {        ...,        images[]{          ...,          image{            ...,            asset->          }        }      },      _type == "featuresBlock" => {        ...,        features[]{          ...,          icon{            ...,            image{              ...,              asset->            }          }        }      },      _type == "heroBlock" => {        ...,        image{          ...,          asset->        }      },      _type == "imageGridBlock" => {        ...,        images[]{          ...,          customImage{            ...,            image{              ...,              asset->            }          }        }      },      _type == "testimonialBlock" => {        ...,        author{          ...,          image{            ...,            asset->          }        }      },      _type == "postsListBlock" => {        ...,        postType,        limit,        order,        "posts": *[_type == "post" && defined(slug.current)][0..10]      }    }  }
export type GetPageQueryResult = {
  _id: string;
  _type: "page";
  title: string;
  slug: Slug;
  heading: string;
  subheading: string | null;
  showHero: boolean | null;
  hero: {
    alt: null;
    asset: {
      url: string | null;
      metadata: {
        dimensions: SanityImageDimensions | null;
      } | null;
    } | null;
  } | null;
  description: BlockContent | null;
  coverImage: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  link: string;
  gallery: Array<{
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    altText?: string;
    _type: "image";
    _key: string;
  }> | null;
  defaultOGImage: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  } | null;
  parentPages: Array<{
    _id: string;
    title: string;
    slug: string;
  }>;
  pageBuilder: Array<{
    _key: string;
    _type: "advancedListBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    listItems: Array<{
      image: {
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
      body?: Array<{
        _key: string;
      } & CustomImage | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          linkType?: "href" | "page" | "post";
          href?: string;
          page?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "page";
          };
          post?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          openInNewTab?: boolean;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      _type: "listItem";
      _key: string;
    }> | null;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
      type?: "bullet" | "number";
      orientation?: "horizontal" | "vertical";
    };
  } | {
    _key: string;
    _type: "bentoBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    grid?: {
      items?: Array<{
        content?: Array<{
          _key: string;
        } & CustomImage | {
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            linkType?: "href" | "page" | "post";
            href?: string;
            page?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "page";
            };
            post?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "post";
            };
            openInNewTab?: boolean;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        }>;
        options?: {
          blockTheme?: "ACCENT" | "MUTED" | "PRIMARY" | "SECONDARY" | "TRANSPARENT";
          colspan?: "four" | "one" | "three" | "two";
        };
        _key: string;
      }>;
      options?: {
        columns?: "four" | "one" | "three" | "two";
        noGap?: boolean;
      };
    };
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
      offset?: boolean;
      reverse?: boolean;
    };
  } | {
    _key: string;
    _type: "callToActionBlock";
    body?: Array<{
      _key: string;
    } & CustomImage | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        linkType?: "href" | "page" | "post";
        href?: string;
        page?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        };
        post?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        openInNewTab?: boolean;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    formDisplay: "inline" | "modal";
    buttonText?: string;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
      layout?: "default" | "form";
    };
  } | {
    _key: string;
    _type: "carouselBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    images: Array<{
      image: {
        _type: "customImage";
        image?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
        };
        altText: string;
        metadata?: {
          width?: number;
          height?: number;
          circle?: boolean;
          showFigure?: boolean;
        };
        figure?: {
          caption?: BlockContent;
          photoCredit?: {
            credit?: string;
            creditLink?: string;
          };
        };
        asset: null;
      } | null;
      body?: Array<{
        _key: string;
      } & CustomImage | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          linkType?: "href" | "page" | "post";
          href?: string;
          page?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "page";
          };
          post?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "post";
          };
          openInNewTab?: boolean;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      _key: string;
    }> | null;
    autoplay?: boolean;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
    };
  } | {
    _key: string;
    _type: "contentBlock";
    content?: Array<{
      _key: string;
    } & CustomImage | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        linkType?: "href" | "page" | "post";
        href?: string;
        page?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "page";
        };
        post?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "post";
        };
        openInNewTab?: boolean;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    align?: "center" | "end" | "start";
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
    };
  } | {
    _key: string;
    _type: "featuresBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    features: Array<{
      icon: {
        _type: "customImage";
        image: {
          asset: {
            _id: string;
            _type: "sanity.imageAsset";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            originalFilename?: string;
            label?: string;
            title?: string;
            description?: string;
            altText?: string;
            sha1hash?: string;
            extension?: string;
            mimeType?: string;
            size?: number;
            assetId?: string;
            uploadId?: string;
            path?: string;
            url?: string;
            metadata?: SanityImageMetadata;
            source?: SanityAssetSourceData;
          } | null;
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
        } | null;
        altText: string;
        metadata?: {
          width?: number;
          height?: number;
          circle?: boolean;
          showFigure?: boolean;
        };
        figure?: {
          caption?: BlockContent;
          photoCredit?: {
            credit?: string;
            creditLink?: string;
          };
        };
      } | null;
      title?: string;
      description?: string;
      _key: string;
    }> | null;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
      columns?: number;
      layout?: "cards" | "default";
    };
  } | {
    _key: string;
    _type: "galleryBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    images?: Array<{
      _key: string;
    } & CustomImage>;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
      width?: "full" | "limited";
    };
  } | {
    _key: string;
    _type: "imageGridBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    images: Array<{
      customImage: {
        _type: "customImage";
        image: {
          asset: {
            _id: string;
            _type: "sanity.imageAsset";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            originalFilename?: string;
            label?: string;
            title?: string;
            description?: string;
            altText?: string;
            sha1hash?: string;
            extension?: string;
            mimeType?: string;
            size?: number;
            assetId?: string;
            uploadId?: string;
            path?: string;
            url?: string;
            metadata?: SanityImageMetadata;
            source?: SanityAssetSourceData;
          } | null;
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
        } | null;
        altText: string;
        metadata?: {
          width?: number;
          height?: number;
          circle?: boolean;
          showFigure?: boolean;
        };
        figure?: {
          caption?: BlockContent;
          photoCredit?: {
            credit?: string;
            creditLink?: string;
          };
        };
      };
      _key: string;
    }> | null;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
      columns?: number;
    };
  } | {
    _key: string;
    _type: "logoParadeBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    images: Array<{
      _key: string;
    } & CustomImage>;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
    };
  } | {
    _key: string;
    _type: "postsListBlock";
    postType: "pages" | "posts";
    limit: number | null;
    order: "newest" | "oldest" | null;
    showPagination?: boolean;
    posts: Array<{
      _id: string;
      _type: "post";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title: string;
      metaTitle?: string;
      slug: Slug;
      publishedAt?: string;
      expirationDate?: string;
      excerpt?: string;
      mainImage?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
      floatImage?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      };
      category?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "category";
      };
      author?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "person";
      };
      body?: BlockContent;
    }>;
  } | {
    _key: string;
    _type: "slideshowBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    images: Array<{
      _key: string;
    } & CustomImage>;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
      autoplay?: boolean;
      interval?: number;
    };
  } | {
    _key: string;
    _type: "statsBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    stats: Array<{
      value?: string;
      title?: string;
      _type: "stat";
      _key: string;
    }>;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
    };
  } | {
    _key: string;
    _type: "testimonialBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    quote: string;
    author: {
      name: string;
      title?: string;
      image: {
        _type: "customImage";
        image?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
        };
        altText: string;
        metadata?: {
          width?: number;
          height?: number;
          circle?: boolean;
          showFigure?: boolean;
        };
        figure?: {
          caption?: BlockContent;
          photoCredit?: {
            credit?: string;
            creditLink?: string;
          };
        };
        asset: null;
      } | null;
    } | null;
    rating?: number;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
    };
  } | {
    _key: string;
    _type: "youtubeBlock";
    heading?: {
      text?: string;
      level?: 2 | 3 | 4 | 5;
    };
    url: string;
    options?: {
      id?: string;
      style?: "DEFAULT" | "FEATURES" | "HOME";
      textAlign?: "center" | "left" | "right";
      vAlign?: "bottom" | "center" | "top";
      blockTheme?: "ACCENT" | "DEFAULT" | "MUTED" | "PRIMARY" | "SECONDARY";
      bgFullWidth?: boolean;
    };
  }> | null;
} | null;
// Variable: pagesSlugs
// Query: *[_type == "page" && defined(slug.current)]  {"slug": slug.current}
export type PagesSlugsResult = Array<{
  slug: string;
}>;

// Source: ./sanity/lib/queries/post.ts
// Variable: allPostsQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) {      _type,  _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  description,  coverImage{    ...,    asset->,  },  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  "link": "blog/" + slug.current,  "categories": categories[]->{    _id,    title,    "slug": slug.current  }  }
export type AllPostsQueryResult = Array<{
  _type: "post";
  _id: string;
  status: "draft" | "published";
  title: string;
  slug: string;
  description: null;
  coverImage: null;
  date: string;
  author: {
    firstName: string;
    lastName: string;
    picture: null;
  } | null;
  link: string;
  categories: null;
}>;
// Variable: morePostsQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {      _type,  _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  description,  coverImage{    ...,    asset->,  },  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  "link": "blog/" + slug.current,  "categories": categories[]->{    _id,    title,    "slug": slug.current  }  }
export type MorePostsQueryResult = Array<{
  _type: "post";
  _id: string;
  status: "draft" | "published";
  title: string;
  slug: string;
  description: null;
  coverImage: null;
  date: string;
  author: {
    firstName: string;
    lastName: string;
    picture: null;
  } | null;
  link: string;
  categories: null;
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {    content[]{      ...,      markDefs[]{        ...,          _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }      }    },      _type,  _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  description,  coverImage{    ...,    asset->,  },  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  "link": "blog/" + slug.current,  "categories": categories[]->{    _id,    title,    "slug": slug.current  }  }
export type PostQueryResult = {
  content: null;
  _type: "post";
  _id: string;
  status: "draft" | "published";
  title: string;
  slug: string;
  description: null;
  coverImage: null;
  date: string;
  author: {
    firstName: string;
    lastName: string;
    picture: null;
  } | null;
  link: string;
  categories: null;
} | null;
// Variable: postPagesSlugs
// Query: *[_type == "post" && defined(slug.current)]  {"slug": slug.current}
export type PostPagesSlugsResult = Array<{
  slug: string;
}>;
// Variable: postsPaginatedQuery
// Query: {  "posts": *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) [$start...$end] {      _type,  _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  description,  coverImage{    ...,    asset->,  },  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  "link": "blog/" + slug.current,  "categories": categories[]->{    _id,    title,    "slug": slug.current  }  },  "total": count(*[_type == "post" && defined(slug.current)])}
export type PostsPaginatedQueryResult = {
  posts: Array<{
    _type: "post";
    _id: string;
    status: "draft" | "published";
    title: string;
    slug: string;
    description: null;
    coverImage: null;
    date: string;
    author: {
      firstName: string;
      lastName: string;
      picture: null;
    } | null;
    link: string;
    categories: null;
  }>;
  total: number;
};

// Source: ./sanity/lib/queries/settings.ts
// Variable: settingsQuery
// Query: *[_type == "settings"][0] {    title,    showTitle,    siteLogo {      alt, // Assuming 'alt' is a field on the siteLogo image object in Sanity      asset-> {        url,        metadata { dimensions }      }    },    navigation {      footer[] {        _key,        linkType,        href, // For external links        hrefLabel, // Label for external links        openInNewTab,        internalName, // General purpose label for internal links        page-> {          title,          "slug": slug.current        },        dropdownLabel // If a footer link item could be a dropdown (less common for footers)      }    }  }
export type SettingsQueryResult = {
  title: string;
  showTitle: boolean | null;
  siteLogo: {
    alt: null;
    asset: {
      url: string | null;
      metadata: {
        dimensions: SanityImageDimensions | null;
      } | null;
    } | null;
  } | null;
  navigation: {
    footer: Array<{
      _key: string;
      linkType: "dropdown" | "href" | "page" | null;
      href: string | null;
      hrefLabel: null;
      openInNewTab: boolean | null;
      internalName: null;
      page: {
        title: string;
        slug: string;
      } | null;
      dropdownLabel: null;
    }> | null;
  } | null;
} | null;

// Source: ./sanity/lib/queries/sitemap.ts
// Variable: sitemapData
// Query: *[_type == "page" || _type == "post" && defined(slug.current)] | order(_type asc) {    "slug": slug.current,    _type,    _updatedAt,  }
export type SitemapDataResult = Array<{
  slug: string;
  _type: "page";
  _updatedAt: string;
} | {
  slug: string;
  _type: "post";
  _updatedAt: string;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n{  gallery[]{\n    ...,\n    asset->\n  }}\n": HomeGalleryResult;
    "\n  {\n  \"defaultOGImage\": *[_type == \"settings\"][0].ogImage{\n    ...,\n    asset->,\n  }\n}\n": DefaultOGImageResult;
    "\n  *[_type == 'home'][0]{\n    _id,\n    _type,\n    \"link\": \"/\",\n    gallery[]{\n      ...,\n      asset->\n    },\n    \"defaultOGImage\": *[_type == \"settings\"][0].ogImage{\n      ...,\n      asset->,\n    },\n    \n\"pageBuilder\": pageBuilder[]{\n      ...,\n      _type == 'advancedListBlock' => {\n        ...,\n        listItems[]{\n          ...,\n          image{\n            ...,\n            asset->\n          }\n        }\n      },\n      _type == \"carouselBlock\" => {\n        ...,\n        images[]{\n          ...,\n          image{\n            ...,\n            asset->\n          }\n        }\n      },\n      _type == \"featuresBlock\" => {\n        ...,\n        features[]{\n          ...,\n          icon{\n            ...,\n            image{\n              ...,\n              asset->\n            }\n          }\n        }\n      },\n      _type == \"heroBlock\" => {\n        ...,\n        image{\n          ...,\n          asset->\n        }\n      },\n      _type == \"imageGridBlock\" => {\n        ...,\n        images[]{\n          ...,\n          customImage{\n            ...,\n            image{\n              ...,\n              asset->\n            }\n          }\n        }\n      },\n      _type == \"testimonialBlock\" => {\n        ...,\n        author{\n          ...,\n          image{\n            ...,\n            asset->\n          }\n        }\n      },\n      _type == \"postsListBlock\" => {\n        ...,\n        postType,\n        limit,\n        order,\n        \"posts\": *[_type == \"post\" && defined(slug.current)][0..10]\n      }\n    }\n\n  }\n": GetHomeQueryResult;
    "\n  *[_type == 'page' && slug.current == $slug][0]{\n    _id,\n    _type,\n    title,\n    slug,\n    heading,\n    subheading,\n    showHero,\n    hero{\n      alt,\n      asset->{\n        url,\n        metadata { dimensions }\n      }\n    },\n    description,\n    coverImage{\n      ...,\n      asset->\n    },\n    \"link\": \"/\" + slug.current,\n    gallery[]{\n      ...,\n      asset->\n    },\n    \"defaultOGImage\": *[_type == \"settings\"][0].ogImage{\n      ...,\n      asset->\n    },\n    \"parentPages\": *[_type == \"page\" && references(^._id)]{\n      _id,\n      title,\n      \"slug\": slug.current\n    },\n    \n\"pageBuilder\": pageBuilder[]{\n      ...,\n      _type == 'advancedListBlock' => {\n        ...,\n        listItems[]{\n          ...,\n          image{\n            ...,\n            asset->\n          }\n        }\n      },\n      _type == \"carouselBlock\" => {\n        ...,\n        images[]{\n          ...,\n          image{\n            ...,\n            asset->\n          }\n        }\n      },\n      _type == \"featuresBlock\" => {\n        ...,\n        features[]{\n          ...,\n          icon{\n            ...,\n            image{\n              ...,\n              asset->\n            }\n          }\n        }\n      },\n      _type == \"heroBlock\" => {\n        ...,\n        image{\n          ...,\n          asset->\n        }\n      },\n      _type == \"imageGridBlock\" => {\n        ...,\n        images[]{\n          ...,\n          customImage{\n            ...,\n            image{\n              ...,\n              asset->\n            }\n          }\n        }\n      },\n      _type == \"testimonialBlock\" => {\n        ...,\n        author{\n          ...,\n          image{\n            ...,\n            asset->\n          }\n        }\n      },\n      _type == \"postsListBlock\" => {\n        ...,\n        postType,\n        limit,\n        order,\n        \"posts\": *[_type == \"post\" && defined(slug.current)][0..10]\n      }\n    }\n\n  }\n": GetPageQueryResult;
    "\n  *[_type == \"page\" && defined(slug.current)]\n  {\"slug\": slug.current}\n": PagesSlugsResult;
    "\n  *[_type == \"post\" && defined(slug.current)] | order(date desc, _updatedAt desc) {\n    \n  _type,\n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  description,\n  coverImage{\n    ...,\n    asset->,\n  },\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{firstName, lastName, picture},\n  \"link\": \"blog/\" + slug.current,\n  \"categories\": categories[]->{\n    _id,\n    title,\n    \"slug\": slug.current\n  }\n\n  }\n": AllPostsQueryResult;
    "\n  *[_type == \"post\" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\n    \n  _type,\n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  description,\n  coverImage{\n    ...,\n    asset->,\n  },\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{firstName, lastName, picture},\n  \"link\": \"blog/\" + slug.current,\n  \"categories\": categories[]->{\n    _id,\n    title,\n    \"slug\": slug.current\n  }\n\n  }\n": MorePostsQueryResult;
    "\n  *[_type == \"post\" && slug.current == $slug] [0] {\n    content[]{\n      ...,\n      markDefs[]{\n        ...,\n        \n  _type == \"link\" => {\n    \"page\": page->slug.current,\n    \"post\": post->slug.current\n  }\n\n      }\n    },\n    \n  _type,\n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  description,\n  coverImage{\n    ...,\n    asset->,\n  },\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{firstName, lastName, picture},\n  \"link\": \"blog/\" + slug.current,\n  \"categories\": categories[]->{\n    _id,\n    title,\n    \"slug\": slug.current\n  }\n\n  }\n": PostQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current)]\n  {\"slug\": slug.current}\n": PostPagesSlugsResult;
    "{\n  \"posts\": *[_type == \"post\" && defined(slug.current)] | order(date desc, _updatedAt desc) [$start...$end] {\n    \n  _type,\n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  description,\n  coverImage{\n    ...,\n    asset->,\n  },\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{firstName, lastName, picture},\n  \"link\": \"blog/\" + slug.current,\n  \"categories\": categories[]->{\n    _id,\n    title,\n    \"slug\": slug.current\n  }\n\n  },\n  \"total\": count(*[_type == \"post\" && defined(slug.current)])\n}\n": PostsPaginatedQueryResult;
    "\n  *[_type == \"settings\"][0] {\n    title,\n    showTitle,\n    siteLogo {\n      alt, // Assuming 'alt' is a field on the siteLogo image object in Sanity\n      asset-> {\n        url,\n        metadata { dimensions }\n      }\n    },\n    navigation {\n      footer[] {\n        _key,\n        linkType,\n        href, // For external links\n        hrefLabel, // Label for external links\n        openInNewTab,\n        internalName, // General purpose label for internal links\n        page-> {\n          title,\n          \"slug\": slug.current\n        },\n        dropdownLabel // If a footer link item could be a dropdown (less common for footers)\n      }\n    }\n  }\n": SettingsQueryResult;
    "\n  *[_type == \"page\" || _type == \"post\" && defined(slug.current)] | order(_type asc) {\n    \"slug\": slug.current,\n    _type,\n    _updatedAt,\n  }\n": SitemapDataResult;
  }
}
